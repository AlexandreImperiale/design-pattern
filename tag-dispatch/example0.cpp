#include <iostream>
#include <vector>
#include <array>

// Data class definition.
struct Data {
  Data() = default;
  Data(const Data&) = delete;
  Data& operator=(const Data&) = delete;
};

// View class definition.
template<typename T> using View = const T&;

// Mutable class definition.
template<typename T> using Mutable = T&;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Data definition.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

using Pnt1D = double;
using Pnt2D = std::array<double, 2>;

struct Mesh1D : Data {
  std::vector<Pnt1D> points;
};

struct Mesh2D : Data {
  std::vector<Pnt2D> points;
};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Data type definition.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

enum Dim1DTag { DIM_1D };
enum Dim2DTag { DIM_2D };

struct Dim1DTypes {
  using Mesh = Mesh1D;
  using Point = Pnt1D;
};

struct Dim2DTypes {
  using Mesh = Mesh2D;
  using Point = Pnt2D;
};

template<typename DimTag> struct DimTypesFactory;
template<> struct DimTypesFactory<Dim1DTag> { using Types = Dim1DTypes; };
template<> struct DimTypesFactory<Dim2DTag> { using Types = Dim2DTypes; };

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Data implementation definition.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template<typename DimTag> struct MeshImpl {

  using Types = typename DimTypesFactory<DimTag>::Types;
  using Mesh = typename Types::Mesh;
  using Point = typename Types::Point;

  static void addPoint(Mutable<Mesh> self, Point p)
  {
    self.points.push_back(p);
  }
};

using Mesh1DImpl = MeshImpl<Dim1DTag>;
using Mesh2DImpl = MeshImpl<Dim2DTag>;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Data tools definition.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template<typename DimTag> struct MeshTools {

  using Types = typename DimTypesFactory<DimTag>::Types;
  using Mesh = typename Types::Mesh;
  using Point = typename Types::Point;

  static size_t getNPoints(View<Mesh> mesh)
  {
    return mesh.points.size();
  }

  static auto getPoint(View<Mesh> mesh, size_t i) -> const Point&
  {
    return mesh.points[i];
  }

  static void specificTool(View<Mesh> mesh);
};

template<> void MeshTools<Dim1DTag>::specificTool(View<Mesh1D>) { std::cout << "Specific tools for Mesh1DImpl" << std::endl; }
template<> void MeshTools<Dim2DTag>::specificTool(View<Mesh2D>) { std::cout << "Specific tools for Mesh1DImpl" << std::endl; }

using Mesh1DTools = MeshTools<Dim1DTag>;
using Mesh2DTools = MeshTools<Dim2DTag>;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// example of tag dispatch pattern
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

struct GeneralTools {
  template<typename DimTag> static void writeMeshString(DimTag);
};

template<> void GeneralTools::writeMeshString<Dim1DTag>(Dim1DTag)
{
  std::cout << "Mesh1D" << std::endl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// main
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int main()
{
  Mesh1D m;
  Mesh1DImpl::addPoint(m, 2.0);
  Mesh1DTools::specificTool(m);
  std::cout << Mesh1DTools::getNPoints(m) << std::endl;
  std::cout << Mesh1DTools::getPoint(m, 0) << std::endl;
  GeneralTools::writeMeshString(DIM_1D);
}
